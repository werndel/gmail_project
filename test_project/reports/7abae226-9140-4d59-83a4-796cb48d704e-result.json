{"name": "test_email_obtainment_passed", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <span class=\"zF\" name=\"Pasek Pasek\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed", "trace": "self = <test_project.tests.email_obteinment_test.TestEmailObtainment object at 0x7fc2706b5358>\n\n>   ???\n\ntest_project/tests/email_obteinment_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_project/pages/email_obteinment.py:82: in get_sent_email\n    sender = list_email_senders[i * 2].get_attribute(\"email\")\n/usr/lib/python3/dist-packages/selenium/webdriver/remote/webelement.py:141: in get_attribute\n    self, name)\n/usr/lib/python3/dist-packages/selenium/webdriver/remote/webdriver.py:636: in execute_script\n    'args': converted_args})['value']\n/usr/lib/python3/dist-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc2706b5eb8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element reference of <span class=...req<@chrome://marionette/content/listener.js:524:29\\\\ndispatch/<@chrome://marionette/content/listener.js:523:15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <span class=\"zF\" name=\"Pasek Pasek\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed\n\n/usr/lib/python3/dist-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException"}, "steps": [{"name": "Opening page", "status": "passed", "start": 1567941564669, "stop": 1567941568803}, {"name": "Setting login", "status": "passed", "parameters": [{"name": "login", "value": "'pasekpasek61@gmail.com'"}], "start": 1567941568804, "stop": 1567941571755}, {"name": "Setting password", "status": "passed", "parameters": [{"name": "password", "value": "'Pasek61pasek'"}], "start": 1567941571755, "stop": 1567941580362}, {"name": "Setting recipient of mail: ''werndel11@gmail.com'', title: ''Donec sit amet.'' and content:'Test'", "status": "passed", "parameters": [{"name": "recipient", "value": "'werndel11@gmail.com'"}, {"name": "title", "value": "'Donec sit amet.'"}, {"name": "content", "value": "'Test'"}], "start": 1567941580363, "stop": 1567941637795}, {"name": "Checking for a successful sending message", "status": "passed", "start": 1567941637795, "stop": 1567941648878}, {"name": "Opening a new tab for logging into another gmail account", "status": "passed", "start": 1567941648878, "stop": 1567941650352}, {"name": "Going to second tab", "status": "passed", "start": 1567941650352, "stop": 1567941650380}, {"name": "Setting login", "status": "passed", "parameters": [{"name": "login", "value": "'werndel11@gmail.com'"}], "start": 1567941650381, "stop": 1567941654263}, {"name": "Setting password", "status": "passed", "parameters": [{"name": "password", "value": "'werndel11werndel'"}], "start": 1567941654264, "stop": 1567941664261}, {"name": "Checking if the email has reached the recipient", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <span class=\"zF\" name=\"Pasek Pasek\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed\n\n", "trace": "  File \"/usr/local/lib/python3.7/dist-packages/allure_commons/_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"/home/alina/PycharmProjects/gmail3/test_project/pages/email_obteinment.py\", line 82, in get_sent_email\n    sender = list_email_senders[i * 2].get_attribute(\"email\")\n  File \"/usr/lib/python3/dist-packages/selenium/webdriver/remote/webelement.py\", line 141, in get_attribute\n    self, name)\n  File \"/usr/lib/python3/dist-packages/selenium/webdriver/remote/webdriver.py\", line 636, in execute_script\n    'args': converted_args})['value']\n  File \"/usr/lib/python3/dist-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/lib/python3/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "title_to_check", "value": "'Donec sit amet.'"}, {"name": "sender_to_check", "value": "'pasekpasek61@gmail.com'"}, {"name": "content_to_check", "value": "'Test'"}], "start": 1567941664263, "stop": 1567941754357}], "start": 1567941552698, "stop": 1567941754367, "uuid": "e1445031-59aa-4c55-bc08-d24a12e6a198", "historyId": "23455838cffcafdb564453df83257268", "fullName": "test_project.tests.email_obteinment_test.TestEmailObtainment#test_email_obtainment_passed", "labels": [{"name": "parentSuite", "value": "test_project.tests"}, {"name": "suite", "value": "email_obteinment_test"}, {"name": "subSuite", "value": "TestEmailObtainment"}, {"name": "host", "value": "alina-Inspiron-N5050"}, {"name": "thread", "value": "25786-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_project.tests.email_obteinment_test"}]}